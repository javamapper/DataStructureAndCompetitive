com.javamapper.problems.ProblemLcs.recursionApproach=1) LCS (Longest Common Subsequence) using recursion	eg.["generation-gap","tiger-lap"]
com.javamapper.problems.ProblemLcs.iterationApproach=2) LCS (Longest Common Subsequence) using Iteration	eg.["generation-gap","tiger-lap"]
com.javamapper.problems.PossibleSubSequnces.recursionApproach=3) Find SubSequences of a string using recursion	eg.[abcd]
com.javamapper.problems.PossibleSubSequnces.iterationApproach=4) Find SubSequences of a string using Iteration	eg.[abcd]
com.javamapper.problems.TreeProblems.buildTreeByOrderedListM1=5) Draw tree from preOrder & inOrder set [aproach1]
com.javamapper.problems.TreeProblems.bildBSTTreeRec=6) Build BST tree of given numbers by Recursion
com.javamapper.problems.TreeProblems.bildBSTTreeIter=7) Build BST tree of given numbers by Iteration 
com.javamapper.problems.PermutationProblems.recursionApproach=11) print all possible Permutation Value of a string using recursion
com.javamapper.problems.PermutationProblems.iterationApproach=12) print all possible Permutation Value of a string using loops
com.javamapper.problems.MinimumParkingSpace.problem1=13) Minimum Parking Space, given set 	eg. [[5, 10], [0, 20], [31, 35], [11, 35], [21, 30]]
com.javamapper.problems.AverageAndCountOfRating.problem1=14) For given set of rating, find average and count of rating 	eg.[gmail:5  facebook:9  gmail:6  facebook:11  linkedin:4  gmail:3 ]